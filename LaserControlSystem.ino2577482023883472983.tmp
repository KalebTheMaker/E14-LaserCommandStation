/*
###############################################################################
## File: LaserControlSystem.ino
## Desc: Main Arduino program for Laser Control System
## Project: LaserControlSystem for Element14 Presents
## License: 
##
## By: Kaleb Clark (KalebTheMaker)
###############################################################################
*/
#include <Adafruit_NeoPixel.h>
#include "LCS_Relay.h"

#ifdef __AVR__
  #include <avr/power.h>
#endif

// Defines
#define LED_PIN   40
#define LED_CNT   10

// Instantiations
Adafruit_NeoPixel lights(LED_CNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// L
LCS_Relay relay_machine(lights,     29, 32, 7); // Machine Power
LCS_Relay relay_chiller(lights,     25, 33, 6); // Water Chiller
LCS_Relay relay_air_assist(lights,  27, 34, 5); // Air Assist
LCS_Relay relay_exhaust(lights,     28, 35, 4); // Exhaust Fan
LCS_Relay relay_computer(lights,    24, 36, 0); // Computer
LCS_Relay relay_aux0(lights,        23, 37, 1); // Aux 01
LCS_Relay relay_aux1(lights,        22, 38, 2); // Aux 02
LCS_Relay relay_aux2(lights,        26, 39, 3); // Aux 03

// Global Variables
unsigned long prev_time;
int main_loop_delay = 1000;
byte flow_pin = 31;
volatile byte pulse_count;

void setup() {
  Serial.begin(115200);

  // Lights Setup
  lights.begin();
  lights.show();
  lights.setBrightness(255);
  //startupShow();

  // Flow Sensor Setup
  pinMode(flow_pin, INPUT_PULLUP);
  digitalWrite(flow_pin, HIGH);
  pulse_count = 0;
  prev_time = 0;
  attachInterrupt(digitalPinToInterrupt(flow_pin), pulseCounter, RISING);
  
  Serial.println("Boot Sequence Complete");
}

void loop() {
  // Main Loop Timer
  if((millis() - prev_time) > main_loop_delay) {
    Serial.println("Second....");
    detachInterrupt(digitalPinToInterrupt(flow_pin));
    Serial.print("PulseCount: ");
    Serial.println(pulse_count);

    prev_time = millis();
    pulse_count = 0;
  }

  // Check Water Flow

  // Check Air Pressure

  // Switch/Relay Updates
  relay_machine.update();
  relay_chiller.update();
  relay_air_assist.update();
  relay_exhaust.update();
  relay_computer.update();
  relay_aux0.update();
  relay_aux1.update();
  relay_aux2.update();
}

void startupShow()
{
  int show_delay = 125;
  for(int i = 0; i < lights.numPixels(); i++) {
    lights.setPixelColor(i, lights.Color(255, 0, 0));
    lights.show();
    delay(show_delay);
    lights.setPixelColor(i, lights.Color(0, 255, 0));
    lights.show();
    delay(show_delay);
    lights.setPixelColor(i, lights.Color(0, 0, 255));
    lights.show();
    delay(show_delay);
    if(i >= 1) {
      lights.setPixelColor((i - 1), lights.Color(0, 0, 0));
      lights.show();
    }
  }

}

void pulseCounter()
{
  pulse_count++;
}
